/**
 * Filename: GraphADT.java 
 * Project: SocialNetworkVisualizerAteam7 
 * Authors: ateam7 
 * Due date: Dec 3 11:59pm 
 * Other source credits: none 
 * Known bugs: none
 * 
 * Social network visualizer
 */

package application;

import java.util.Set;


/**
 * A simple undirected graph interface (DO NOT edit this file)
 */
public interface GraphADT {

  /**
   * Add new person to the graph.
   *
   * If name is null or already exists, method ends without adding a person or throwing an
   * exception. Method returns false.
   * 
   * Valid argument conditions: 1. name is non-null 2. person is not already in the graph
   * 
   * @param name the person to be added
   * @return true if the person is successfully added; false otherwise
   */
  public boolean addNode(String name);


  /**
   * Remove a person and all associated edges from the graph.
   * 
   * If name is null or the corresponding person does not exist, method ends without removing a
   * person, edges, or throwing an exception. Method returns false.
   * 
   * Valid argument conditions: 1. name is non-null 2. person is already in the graph
   * 
   * @param name the person to be removed
   * @return true if the person is successfully removed; false otherwise
   */
  public boolean removeNode(String name);


  /**
   * Add the edge between name1 and name2 to this graph. (edge is undirected)
   * 
   * If either person does not exist, PERSON IS ADDED and then edge is created. No exception is
   * thrown. Method returns true.
   *
   * If the edge exists in the graph, no edge is added and no exception is thrown. Method returns
   * false.
   * 
   * Valid argument conditions: 1. neither person is null 2. both persons are in the graph 3. the
   * edge is not in the graph
   * 
   * @param name1 the first person
   * @param name2 the second person
   * @return true if edge successfully added; false otherwise
   */
  public boolean addEdge(String name1, String name2);


  /**
   * Remove the edge between name1 and name2 from this graph. (edge is undirected) If either person does
   * not exist, or if an edge between name1 and name2 does not exist, no edge is removed and no
   * exception is thrown. Method returns false.
   * 
   * Valid argument conditions: 1. neither person is null 2. both persons are in the graph 3. the
   * edge name1 and name2 is in the graph
   * 
   * @param name1 the first person
   * @param name2 the second person
   * @return true if edge is successfully removed; false otherwise
   */
  public boolean removeEdge(String name1, String name2);


  /**
   * Returns a Set that contains all the persons
   * 
   * @return a Set<Person> which contains all the persons in the graph
   */
  public Set<Person> getAllNodes();


  /**
   * Get all the neighbor (adjacent-dependencies) of a person
   * 
   * @param name the specified person
   * @return an Set<Person> of all the adjacent vertices for specified person
   */
  public Set<Person> getNeighbors(String name);


  /**
   * Get the person given his/her name
   * 
   * @param name the name of the person of interest
   * @return the person
   */
  public Person getNode(String name);

}
